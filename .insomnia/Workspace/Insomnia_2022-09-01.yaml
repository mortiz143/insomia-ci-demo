_type: export
__export_format: 4
__export_date: 2022-09-01T04:41:28.315Z
__export_source: insomnia.desktop.app:v2022.5.1
resources:
  - _id: req_wrk_dfb88db8c20b40e59fd27849ffa0287823acbe44
    parentId: fld_wrk_dfb88db8c20b40e59fd27849ffa028781b034c38
    modified: 1662007012125
    created: 1662006936906
    url: "{{ base_url }}/pet"
    name: Add a new pet to the store
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "id": 0,
          "category": {
            "id": 0,
            "name": "string"
          },
          "name": "doggie",
          "photoUrls": [
            "string"
          ],
          "tags": [
            {
              "id": 0,
              "name": "string"
            }
          ],
          "status": "string"
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
        id: pair_94bea5404f6f441a832dfda44594f58f
    authentication: {}
    metaSortKey: -1662006936906
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: fld_wrk_dfb88db8c20b40e59fd27849ffa028781b034c38
    parentId: wrk_dfb88db8c20b40e59fd27849ffa02878
    modified: 1662006936910
    created: 1662006936910
    name: pet
    description: Everything about your Pets
    environment: {}
    environmentPropertyOrder: null
    metaSortKey: -1662006936910
    _type: request_group
  - _id: wrk_dfb88db8c20b40e59fd27849ffa02878
    parentId: null
    modified: 1662005979245
    created: 1662005979245
    name: New Document
    description: ""
    scope: design
    _type: workspace
  - _id: req_wrk_dfb88db8c20b40e59fd27849ffa0287874a7a059
    parentId: fld_wrk_dfb88db8c20b40e59fd27849ffa028781b034c38
    modified: 1662006936905
    created: 1662006936905
    url: "{{ base_url }}/pet"
    name: Update an existing pet
    description: ""
    method: PUT
    body:
      mimeType: application/json
      text: |-
        {
          "id": 0,
          "category": {
            "id": 0,
            "name": "string"
          },
          "name": "doggie",
          "photoUrls": [
            "string"
          ],
          "tags": [
            {
              "id": 0,
              "name": "string"
            }
          ],
          "status": "string"
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication: {}
    metaSortKey: -1662006936905
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_dfb88db8c20b40e59fd27849ffa0287880ab0d08
    parentId: fld_wrk_dfb88db8c20b40e59fd27849ffa028781b034c38
    modified: 1662006936903
    created: 1662006936903
    url: "{{ base_url }}/pet/findByStatus"
    name: Finds Pets by status
    description: ""
    method: GET
    body: {}
    parameters:
      - name: status
        disabled: false
        value: available
    headers: []
    authentication: {}
    metaSortKey: -1662006936903
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_dfb88db8c20b40e59fd27849ffa0287842a17980
    parentId: fld_wrk_dfb88db8c20b40e59fd27849ffa028781b034c38
    modified: 1662006936902
    created: 1662006936902
    url: "{{ base_url }}/pet/findByTags"
    name: Finds Pets by tags
    description: ""
    method: GET
    body: {}
    parameters:
      - name: tags
        disabled: false
        value: string
    headers: []
    authentication: {}
    metaSortKey: -1662006936902
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_dfb88db8c20b40e59fd27849ffa028783d1a51d3
    parentId: fld_wrk_dfb88db8c20b40e59fd27849ffa028781b034c38
    modified: 1662006936901
    created: 1662006936901
    url: "{{ base_url }}/pet/{{ petId }}"
    name: Find pet by ID
    description: ""
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication: {}
    metaSortKey: -1662006936901
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_dfb88db8c20b40e59fd27849ffa02878a4608701
    parentId: fld_wrk_dfb88db8c20b40e59fd27849ffa028781b034c38
    modified: 1662006936900
    created: 1662006936900
    url: "{{ base_url }}/pet/{{ petId }}"
    name: Updates a pet in the store with form data
    description: ""
    method: POST
    body:
      mimeType: application/x-www-form-urlencoded
    parameters: []
    headers: []
    authentication: {}
    metaSortKey: -1662006936900
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_dfb88db8c20b40e59fd27849ffa02878e804bd05
    parentId: fld_wrk_dfb88db8c20b40e59fd27849ffa028781b034c38
    modified: 1662006936899
    created: 1662006936899
    url: "{{ base_url }}/pet/{{ petId }}"
    name: Deletes a pet
    description: ""
    method: DELETE
    body: {}
    parameters: []
    headers:
      - name: api_key
        disabled: true
        value: string
    authentication: {}
    metaSortKey: -1662006936899
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_dfb88db8c20b40e59fd27849ffa02878443ac9e7
    parentId: fld_wrk_dfb88db8c20b40e59fd27849ffa028783a21295d
    modified: 1662006936897
    created: 1662006936897
    url: "{{ base_url }}/store/inventory"
    name: Returns pet inventories by status
    description: ""
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication: {}
    metaSortKey: -1662006936897
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: fld_wrk_dfb88db8c20b40e59fd27849ffa028783a21295d
    parentId: wrk_dfb88db8c20b40e59fd27849ffa02878
    modified: 1662006936909
    created: 1662006936909
    name: store
    description: Access to Petstore orders
    environment: {}
    environmentPropertyOrder: null
    metaSortKey: -1662006936909
    _type: request_group
  - _id: req_wrk_dfb88db8c20b40e59fd27849ffa02878e24a4f9e
    parentId: fld_wrk_dfb88db8c20b40e59fd27849ffa028783a21295d
    modified: 1662006936896
    created: 1662006936896
    url: "{{ base_url }}/store/order"
    name: Place an order for a pet
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "id": 0,
          "petId": 0,
          "quantity": 0,
          "shipDate": "2022-09-01T04:35:36.873Z",
          "status": "string",
          "complete": true
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication: {}
    metaSortKey: -1662006936896
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_dfb88db8c20b40e59fd27849ffa02878f021bcd3
    parentId: fld_wrk_dfb88db8c20b40e59fd27849ffa028783a21295d
    modified: 1662006936895
    created: 1662006936895
    url: "{{ base_url }}/store/order/{{ orderId }}"
    name: Find purchase order by ID
    description: ""
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication: {}
    metaSortKey: -1662006936895
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_dfb88db8c20b40e59fd27849ffa0287815e47538
    parentId: fld_wrk_dfb88db8c20b40e59fd27849ffa028783a21295d
    modified: 1662006936893
    created: 1662006936893
    url: "{{ base_url }}/store/order/{{ orderId }}"
    name: Delete purchase order by ID
    description: ""
    method: DELETE
    body: {}
    parameters: []
    headers: []
    authentication: {}
    metaSortKey: -1662006936893
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_dfb88db8c20b40e59fd27849ffa02878fe3d55d0
    parentId: fld_wrk_dfb88db8c20b40e59fd27849ffa0287812dea96f
    modified: 1662006936891
    created: 1662006936891
    url: "{{ base_url }}/user"
    name: Create user
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "id": 0,
          "username": "string",
          "firstName": "string",
          "lastName": "string",
          "email": "string",
          "password": "string",
          "phone": "string",
          "userStatus": 0
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication: {}
    metaSortKey: -1662006936891
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: fld_wrk_dfb88db8c20b40e59fd27849ffa0287812dea96f
    parentId: wrk_dfb88db8c20b40e59fd27849ffa02878
    modified: 1662006936907
    created: 1662006936907
    name: user
    description: Operations about user
    environment: {}
    environmentPropertyOrder: null
    metaSortKey: -1662006936907
    _type: request_group
  - _id: req_wrk_dfb88db8c20b40e59fd27849ffa028784cb83333
    parentId: fld_wrk_dfb88db8c20b40e59fd27849ffa0287812dea96f
    modified: 1662006936890
    created: 1662006936890
    url: "{{ base_url }}/user/createWithArray"
    name: Creates list of users with given input array
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        [
          {
            "id": 0,
            "username": "string",
            "firstName": "string",
            "lastName": "string",
            "email": "string",
            "password": "string",
            "phone": "string",
            "userStatus": 0
          }
        ]
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication: {}
    metaSortKey: -1662006936890
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_dfb88db8c20b40e59fd27849ffa02878e94a615f
    parentId: fld_wrk_dfb88db8c20b40e59fd27849ffa0287812dea96f
    modified: 1662006936888
    created: 1662006936888
    url: "{{ base_url }}/user/createWithList"
    name: Creates list of users with given input array
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        [
          {
            "id": 0,
            "username": "string",
            "firstName": "string",
            "lastName": "string",
            "email": "string",
            "password": "string",
            "phone": "string",
            "userStatus": 0
          }
        ]
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication: {}
    metaSortKey: -1662006936888
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_dfb88db8c20b40e59fd27849ffa0287800ac9da2
    parentId: fld_wrk_dfb88db8c20b40e59fd27849ffa0287812dea96f
    modified: 1662006936887
    created: 1662006936887
    url: "{{ base_url }}/user/login"
    name: Logs user into the system
    description: ""
    method: GET
    body: {}
    parameters:
      - name: username
        disabled: false
        value: string
      - name: password
        disabled: false
        value: string
    headers: []
    authentication: {}
    metaSortKey: -1662006936887
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_dfb88db8c20b40e59fd27849ffa02878740025cb
    parentId: fld_wrk_dfb88db8c20b40e59fd27849ffa0287812dea96f
    modified: 1662006936885
    created: 1662006936885
    url: "{{ base_url }}/user/logout"
    name: Logs out current logged in user session
    description: ""
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication: {}
    metaSortKey: -1662006936885
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_dfb88db8c20b40e59fd27849ffa0287874f1d1d1
    parentId: fld_wrk_dfb88db8c20b40e59fd27849ffa0287812dea96f
    modified: 1662006936884
    created: 1662006936884
    url: "{{ base_url }}/user/{{ username }}"
    name: Get user by user name
    description: ""
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication: {}
    metaSortKey: -1662006936884
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_dfb88db8c20b40e59fd27849ffa028786d74493f
    parentId: fld_wrk_dfb88db8c20b40e59fd27849ffa0287812dea96f
    modified: 1662006936882
    created: 1662006936882
    url: "{{ base_url }}/user/{{ username }}"
    name: Updated user
    description: ""
    method: PUT
    body:
      mimeType: application/json
      text: |-
        {
          "id": 0,
          "username": "string",
          "firstName": "string",
          "lastName": "string",
          "email": "string",
          "password": "string",
          "phone": "string",
          "userStatus": 0
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication: {}
    metaSortKey: -1662006936882
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_dfb88db8c20b40e59fd27849ffa0287838e8e88f
    parentId: fld_wrk_dfb88db8c20b40e59fd27849ffa0287812dea96f
    modified: 1662006936879
    created: 1662006936879
    url: "{{ base_url }}/user/{{ username }}"
    name: Delete user
    description: ""
    method: DELETE
    body: {}
    parameters: []
    headers: []
    authentication: {}
    metaSortKey: -1662006936880
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_164c20fe4bc04a0a8cb1e6466fcc132b
    parentId: wrk_dfb88db8c20b40e59fd27849ffa02878
    modified: 1662005979277
    created: 1662005979277
    url: ""
    name: New Request
    description: ""
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication: {}
    metaSortKey: -1662005979277
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: env_003c9335d2eb5e82891f07529bbed624203ec579
    parentId: wrk_dfb88db8c20b40e59fd27849ffa02878
    modified: 1662005979269
    created: 1662005979269
    name: Base Environment
    data:
      base_url: "{{ scheme }}://{{ host }}{{ base_path }}"
    dataPropertyOrder: null
    color: null
    isPrivate: false
    metaSortKey: 1662005979269
    _type: environment
  - _id: jar_003c9335d2eb5e82891f07529bbed624203ec579
    parentId: wrk_dfb88db8c20b40e59fd27849ffa02878
    modified: 1662005979274
    created: 1662005979274
    name: Default Jar
    cookies: []
    _type: cookie_jar
  - _id: spc_0960f423b04645da9205582895e4724a
    parentId: wrk_dfb88db8c20b40e59fd27849ffa02878
    modified: 1662007116008
    created: 1662005979264
    fileName: Pet Store Insomia
    contents: >-
      openapi: 3.0.0

      info:
        description: "This is a sample server Petstore server.  You can find out more about
          Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,
          #swagger](http://swagger.io/irc/).  For this sample, you can use the api key
          `special-key` to test the authorization filters."
        version: 1.0.2
        title: Swagger Petstore
        termsOfService: http://swagger.io/terms/
        contact:
          email: apiteam@swagger.io
        license:
          name: Apache 2.0
          url: http://www.apache.org/licenses/LICENSE-2.0.html
      tags:
        - name: pet
          description: Everything about your Pets
          externalDocs:
            description: Find out more
            url: http://swagger.io
        - name: store
          description: Access to Petstore orders
        - name: user
          description: Operations about user
          externalDocs:
            description: Find out more about our store
            url: http://swagger.io
      paths:
        /pet:
          post:
            tags:
              - pet
            summary: Add a new pet to the store
            description: ""
            operationId: addPet
            requestBody:
              $ref: "#/components/requestBodies/Pet"
            responses:
              "405":
                description: Invalid input
          put:
            tags:
              - pet
            summary: Update an existing pet
            description: ""
            operationId: updatePet
            requestBody:
              $ref: "#/components/requestBodies/Pet"
            responses:
              "400":
                description: Invalid ID supplied
              "404":
                description: Pet not found
              "405":
                description: Validation exception
        /pet/findByStatus:
          get:
            tags:
              - pet
            summary: Finds Pets by status
            description: Multiple status values can be provided with comma separated strings
            operationId: findPetsByStatus
            parameters:
              - name: status
                in: query
                description: Status values that need to be considered for filter
                required: true
                explode: true
                schema:
                  type: array
                  items:
                    type: string
                    enum:
                      - available
                      - pending
                      - sold
                    default: available
            responses:
              "200":
                description: successful operation
                content:
                  application/xml:
                    schema:
                      type: array
                      items:
                        $ref: "#/components/schemas/Pet"
                  application/json:
                    schema:
                      type: array
                      items:
                        $ref: "#/components/schemas/Pet"
              "400":
                description: Invalid status value
        /pet/findByTags:
          get:
            tags:
              - pet
            summary: Finds Pets by tags
            description: Multiple tags can be provided with comma separated strings. Use tag1,
              tag2, tag3 for testing.
            operationId: findPetsByTags
            parameters:
              - name: tags
                in: query
                description: Tags to filter by
                required: true
                explode: true
                schema:
                  type: array
                  items:
                    type: string
            responses:
              "200":
                description: successful operation
                content:
                  application/xml:
                    schema:
                      type: array
                      items:
                        $ref: "#/components/schemas/Pet"
                  application/json:
                    schema:
                      type: array
                      items:
                        $ref: "#/components/schemas/Pet"
              "400":
                description: Invalid tag value
            deprecated: true
        "/pet/{petId}":
          get:
            tags:
              - pet
            summary: Find pet by ID
            description: Returns a single pet
            operationId: getPetById
            parameters:
              - name: petId
                in: path
                description: ID of pet to return
                required: true
                schema:
                  type: integer
                  format: int64
            responses:
              "200":
                description: successful operation
                content:
                  application/xml:
                    schema:
                      $ref: "#/components/schemas/Pet"
                  application/json:
                    schema:
                      $ref: "#/components/schemas/Pet"
              "400":
                description: Invalid ID supplied
              "404":
                description: Pet not found
          post:
            tags:
              - pet
            summary: Updates a pet in the store with form data
            description: ""
            operationId: updatePetWithForm
            parameters:
              - name: petId
                in: path
                description: ID of pet that needs to be updated
                required: true
                schema:
                  type: integer
                  format: int64
            requestBody:
              content:
                application/x-www-form-urlencoded:
                  schema:
                    type: object
                    properties:
                      name:
                        description: Updated name of the pet
                        type: string
                      status:
                        description: Updated status of the pet
                        type: string
            responses:
              "405":
                description: Invalid input
          delete:
            tags:
              - pet
            summary: Deletes a pet
            description: ""
            operationId: deletePet
            parameters:
              - name: api_key
                in: header
                required: false
                schema:
                  type: string
              - name: petId
                in: path
                description: Pet id to delete
                required: true
                schema:
                  type: integer
                  format: int64
            responses:
              "400":
                description: Invalid ID supplied
              "404":
                description: Pet not found
        /store/inventory:
          get:
            tags:
              - store
            summary: Returns pet inventories by status
            description: Returns a map of status codes to quantities
            operationId: getInventory
            responses:
              "200":
                description: successful operation
                content:
                  application/json:
                    schema:
                      type: object
                      additionalProperties:
                        type: integer
                        format: int32
        /store/order:
          post:
            tags:
              - store
            summary: Place an order for a pet
            description: ""
            operationId: placeOrder
            requestBody:
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Order"
              description: order placed for purchasing the pet
              required: true
            responses:
              "200":
                description: successful operation
                content:
                  application/xml:
                    schema:
                      $ref: "#/components/schemas/Order"
                  application/json:
                    schema:
                      $ref: "#/components/schemas/Order"
              "400":
                description: Invalid Order
        "/store/order/{orderId}":
          get:
            tags:
              - store
            summary: Find purchase order by ID
            description: For valid response try integer IDs with value >= 1 and <= 10. Other
              values will generated exceptions
            operationId: getOrderById
            parameters:
              - name: orderId
                in: path
                description: ID of pet that needs to be fetched
                required: true
                schema:
                  type: integer
                  format: int64
                  minimum: 1
                  maximum: 10
            responses:
              "200":
                description: successful operation
                content:
                  application/xml:
                    schema:
                      $ref: "#/components/schemas/Order"
                  application/json:
                    schema:
                      $ref: "#/components/schemas/Order"
              "400":
                description: Invalid ID supplied
              "404":
                description: Order not found
          delete:
            tags:
              - store
            summary: Delete purchase order by ID
            description: For valid response try integer IDs with positive integer value. Negative
              or non-integer values will generate API errors
            operationId: deleteOrder
            parameters:
              - name: orderId
                in: path
                description: ID of the order that needs to be deleted
                required: true
                schema:
                  type: integer
                  format: int64
                  minimum: 1
            responses:
              "400":
                description: Invalid ID supplied
              "404":
                description: Order not found
        /user:
          post:
            tags:
              - user
            summary: Create user
            description: This can only be done by the logged in user.
            operationId: createUser
            requestBody:
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/User"
              description: Created user object
              required: true
            responses:
              default:
                description: successful operation
        /user/createWithArray:
          post:
            tags:
              - user
            summary: Creates list of users with given input array
            description: ""
            operationId: createUsersWithArrayInput
            requestBody:
              $ref: "#/components/requestBodies/UserArray"
            responses:
              default:
                description: successful operation
        /user/createWithList:
          post:
            tags:
              - user
            summary: Creates list of users with given input array
            description: ""
            operationId: createUsersWithListInput
            requestBody:
              $ref: "#/components/requestBodies/UserArray"
            responses:
              default:
                description: successful operation
        /user/login:
          get:
            tags:
              - user
            summary: Logs user into the system
            description: ""
            operationId: loginUser
            parameters:
              - name: username
                in: query
                description: The user name for login
                required: true
                schema:
                  type: string
              - name: password
                in: query
                description: The password for login in clear text
                required: true
                schema:
                  type: string
            responses:
              "200":
                description: successful operation
                headers:
                  X-Rate-Limit:
                    description: calls per hour allowed by the user
                    schema:
                      type: integer
                      format: int32
                  X-Expires-After:
                    description: date in UTC when token expires
                    schema:
                      type: string
                      format: date-time
                content:
                  application/xml:
                    schema:
                      type: string
                  application/json:
                    schema:
                      type: string
              "400":
                description: Invalid username/password supplied
        /user/logout:
          get:
            tags:
              - user
            summary: Logs out current logged in user session
            description: ""
            operationId: logoutUser
            responses:
              default:
                description: successful operation
        "/user/{username}":
          get:
            tags:
              - user
            summary: Get user by user name
            description: ""
            operationId: getUserByName
            parameters:
              - name: username
                in: path
                description: "The name that needs to be fetched. Use user1 for testing. "
                required: true
                schema:
                  type: string
            responses:
              "200":
                description: successful operation
                content:
                  application/xml:
                    schema:
                      $ref: "#/components/schemas/User"
                  application/json:
                    schema:
                      $ref: "#/components/schemas/User"
              "400":
                description: Invalid username supplied
              "404":
                description: User not found
          put:
            tags:
              - user
            summary: Updated user
            description: This can only be done by the logged in user.
            operationId: updateUser
            parameters:
              - name: username
                in: path
                description: name that need to be updated
                required: true
                schema:
                  type: string
            requestBody:
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/User"
              description: Updated user object
              required: true
            responses:
              "400":
                description: Invalid user supplied
              "404":
                description: User not found
          delete:
            tags:
              - user
            summary: Delete user
            description: This can only be done by the logged in user.
            operationId: deleteUser
            parameters:
              - name: username
                in: path
                description: The name that needs to be deleted
                required: true
                schema:
                  type: string
            responses:
              "400":
                description: Invalid username supplied
              "404":
                description: User not found
      externalDocs:
        description: Find out more about Swagger
        url: http://swagger.io
      servers:
        - url: https://petstore.swagger.io/v2
      components:
        requestBodies:
          UserArray:
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/User"
            description: List of user object
            required: true
          Pet:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Pet"
              application/xml:
                schema:
                  $ref: "#/components/schemas/Pet"
            description: Pet object that needs to be added to the store
            required: true
        schemas:
          Order:
            type: object
            properties:
              id:
                type: integer
                format: int64
              petId:
                type: integer
                format: int64
              quantity:
                type: integer
                format: int32
              shipDate:
                type: string
                format: date-time
              status:
                type: string
                description: Order Status
                enum:
                  - placed
                  - approved
                  - delivered
              complete:
                type: boolean
                default: false
            xml:
              name: Order
          User:
            type: object
            properties:
              id:
                type: integer
                format: int64
              username:
                type: string
              firstName:
                type: string
              lastName:
                type: string
              email:
                type: string
              password:
                type: string
              phone:
                type: string
              userStatus:
                type: integer
                format: int32
                description: User Status
            xml:
              name: User
          Category:
            type: object
            properties:
              id:
                type: integer
                format: int64
              name:
                type: string
            xml:
              name: Category
          Tag:
            type: object
            properties:
              id:
                type: integer
                format: int64
              name:
                type: string
            xml:
              name: Tag
          Pet:
            type: object
            required:
              - name
              - photoUrls
            properties:
              id:
                type: integer
                format: int64
              category:
                $ref: "#/components/schemas/Category"
              name:
                type: string
                example: doggie
              photoUrls:
                type: array
                xml:
                  name: photoUrl
                  wrapped: true
                items:
                  type: string
              tags:
                type: array
                xml:
                  name: tag
                  wrapped: true
                items:
                  $ref: "#/components/schemas/Tag"
              status:
                type: string
                description: pet status in the store
                enum:
                  - available
                  - pending
                  - sold
            xml:
              name: Pet
          ApiResponse:
            type: object
            properties:
              code:
                type: integer
                format: int32
              type:
                type: string
              message:
                type: string
    contentType: yaml
    _type: api_spec
  - _id: uts_2cf84521035642d5b8b5b83489caa0f3
    parentId: wrk_dfb88db8c20b40e59fd27849ffa02878
    modified: 1662007123738
    created: 1662007123738
    name: Sample Test Suite
    _type: unit_test_suite
  - _id: env_env_003c9335d2eb5e82891f07529bbed624203ec579_sub
    parentId: env_003c9335d2eb5e82891f07529bbed624203ec579
    modified: 1662006936912
    created: 1662006936912
    name: OpenAPI env
    data:
      scheme: https
      base_path: /v2
      host: petstore.swagger.io
    dataPropertyOrder: null
    color: null
    isPrivate: false
    metaSortKey: 1662006936912
    _type: environment
  - _id: ut_3692d413074d4d02911a7dce710474eb
    parentId: uts_2cf84521035642d5b8b5b83489caa0f3
    modified: 1662007154255
    created: 1662007128148
    requestId: req_wrk_dfb88db8c20b40e59fd27849ffa0287823acbe44
    name: create a new pet success
    code: |-
      const response1 = await insomnia.send();
      expect(response1.status).to.equal(200);
    _type: unit_test
